# -*- coding: utf-8 -*-
"""Working-v1-RFC search v1 langchain HF embed PalmAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VM2a_InQKf1li0t2TSXEYb7dY1UNaWsi
"""

import os

os.environ['GOOGLE_API_KEY'] = ''
print(os.environ.get('GOOGLE_API_KEY'))


!pip install --upgrade langchain
import langchain

!pip install pypdf
!pip install faiss-gpu

from langchain.embeddings.huggingface import HuggingFaceEmbeddings

from langchain.embeddings.cache import CacheBackedEmbeddings
from langchain.vectorstores import FAISS
from langchain.storage import LocalFileStore
from langchain.document_loaders import PyPDFDirectoryLoader
from langchain.chains import RetrievalQA

!pip install -q google.generativeai
import google.generativeai as palm
from langchain.chat_models import ChatGooglePalm

# PDF helper
!pip install weasyprint
import weasyprint

!pip install sentence_transformers
import sentence_transformers
embeddings_model = HuggingFaceEmbeddings()

import requests
import re
import csv

GOOGLE_API_KEY="AIzaSyBbGTfG5terRKdtXt31VfqBdc4hku9_Z3A"
palm.configure(api_key=GOOGLE_API_KEY)
print(os.environ.get('GOOGLE_API_KEY'))



sample_prompts = ["What is introduction of RFC0158",
                   "What is the minimum serving site implementation of RFC0158"]


# Define the path to the CSV file
csv_file = './sample_data/rfclist-200/rfc-index-200-csv-good.csv'

store = LocalFileStore("./sample_data/cache/")

loader = PyPDFDirectoryLoader("./sample_data/rfc_pdf/")

#####
## Prompt augment: Get RFC number to title mapping to augment
## the prompt along with rfc number
######



# Define a function to extract the RFC number from the question
def extract_rfc_number(question):
    match = re.search(r'rfc\s*(\d+)', question, re.IGNORECASE)
    if match:
        return f"RFC{match.group(1)}"
    return None

# Define a function to search the CSV file for the RFC number and return the title
def get_rfc_title(rfc_number, csv_file):
    with open(csv_file, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        next(csvreader)  # Skip the header row
        for row in csvreader:
            doc_id, title = row
            if doc_id.strip() == rfc_number:
                return title.strip()
    return None  # Return None if RFC number not found


# Extract the RFC number from question and append
appended_sample_prompts = []
for question in sample_prompts:
  print("Original question:", question)
  rfc_number = extract_rfc_number(question)
  print("RFC number from input question:",rfc_number)

# Search for the RFC title and print it
  rfc_title = get_rfc_title(rfc_number, csv_file)
  if rfc_title:
    print(f"The title of {rfc_number} is '{rfc_title}'")
  else:
    print(f"RFC {rfc_number} not found in the CSV file.")
# Append title to question
  appended_question = f"{question} {rfc_title}"
  print(appended_question)
  appended_sample_prompts.append(appended_question)

print(appended_sample_prompts)

########
### THis is the part where RFC is stored in local PDF from HTML page
#########


# First reformat RFC string format in question (e.g RFC40, RFC040)
# Need it to be rfc40 for url - http://www.rfc-editor.org/rfc/rfc40
if rfc_number.startswith("RFC0"):
  rfc_number_for_url = "rfc" + rfc_number[3:].lstrip("0")

print("rfc number for url:", rfc_number_for_url)

#url = "https://www.rfc-editor.org/rfc/rfc158"
url = f"https://www.rfc-editor.org/rfc/{rfc_number_for_url}"
print(url)

out_pdf_file = f"./sample_data/rfc_pdf/{rfc_number}.pdf"
print(out_pdf_file)

# Send an HTTP GET request to the URL
response = requests.get(url)

print(response.status_code)
# Check if the request was successful
if response.status_code == 200:
  pdf = weasyprint.HTML(url).write_pdf()
  open(out_pdf_file, 'wb').write(pdf)
else:
    print("Failed to retrieve the web page.")

####
## This is the part where PDF is embedded and vectorized
####
pages = loader.load_and_split()
print(len(pages))
print(pages)

embedder = CacheBackedEmbeddings.from_bytes_store(
    embeddings_model,
    store
)

vector_store = FAISS.from_documents(pages, embedder)

# This is the retrieval function which is used later
medium_qa_chain = RetrievalQA.from_chain_type(
    llm=ChatGooglePalm(),
    retriever=vector_store.as_retriever(),
    return_source_documents=True,
    verbose=True
)

for question in appended_sample_prompts:
  print()
  print("------------------------------------")
  print("RAG Response")
  print("------------------------------------")
  response_rag = medium_qa_chain({"query":question})
  print(response_rag['result'])
  print()
  print("------------------------------------")
  print("Source")
  print("------------------------------------")
  print(response_rag['source_documents'])
  print()

!curl ipinfo.io